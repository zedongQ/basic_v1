<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:jdbc="http://www.springframework.org/schema/jdbc" 
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd  
                        http://www.springframework.org/schema/jdbc 
                        http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd  
                        http://www.springframework.org/schema/tx 
                        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd 
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

    <!-- 引入配置文件 -->
    <bean id="propertyConfigurer"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties" />
    </bean>

    <context:component-scan base-package="org.ieforex.service.impl"/> 
    
    <!-- 引入阿里的druid数据库连接池，同时其提供了监控管理功能 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
	  <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
	  <property name="driverClassName" value="${jdbc.driverClass}" />
	 
	    <!-- 基本属性 url、user、password -->
	    <property name="url" value="${jdbc.url}" />
	    <property name="username" value="${jdbc.user}" />
	    <property name="password" value="${jdbc.password}" />
	 
	    <!-- 配置初始化大小、最小、最大 -->
	    <property name="initialSize" value="${jdbc.initialSize}" />
	    <property name="minIdle" value="${jdbc.minIdle}" />
	    <property name="maxActive" value="${jdbc.maxIdle}" />
	 
	    <!-- 配置获取连接等待超时的时间 -->
	    <property name="maxWait" value="${jdbc.maxWait}" />
	 
	    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	    <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
	 
	    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	    <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
	 
	    <property name="validationQuery" value="SELECT 'x'" />
	    <property name="testWhileIdle" value="true" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	</bean>
      
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis.xml" />
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath*:org/ieforex/mapping/*Mapper.xml"/>
    </bean>
    
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
 	<bean id="singleTable" class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
 	    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	    <property name="basePackage" value="org.ieforex.dao"/>
	</bean>
<!-- 	<bean id="multipleTable" class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
	  <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	  <property name="basePackage" value="org.ieforex.multidao"/>
	  <property name="markerInterface" value="tk.mybatis.mapper.multiple.MultiBaseMapper"/>
	</bean> -->
    <tx:annotation-driven transaction-manager="txManager"  proxy-target-class="true"/>

	<!-- a PlatformTransactionManager is still required -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	   <!-- (this dependency is defined somewhere else) -->
	   <property name="dataSource" ref="dataSource"/>
	</bean>
  
</beans>